/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Election {
  export type CandidateStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    voteCount: PromiseOrValue<BigNumberish>;
  };

  export type CandidateStructOutput = [BigNumber, string, BigNumber] & {
    id: BigNumber;
    name: string;
    voteCount: BigNumber;
  };

  export type VoterStruct = {
    voter: PromiseOrValue<string>;
    votedOn: PromiseOrValue<BigNumberish>;
  };

  export type VoterStructOutput = [string, BigNumber] & {
    voter: string;
    votedOn: BigNumber;
  };
}

export interface ElectionInterface extends utils.Interface {
  functions: {
    "candidates(uint8)": FunctionFragment;
    "candidatesCount()": FunctionFragment;
    "getCandidatesList()": FunctionFragment;
    "getVotersList()": FunctionFragment;
    "isVoter(address)": FunctionFragment;
    "totalVotes()": FunctionFragment;
    "vote(uint8)": FunctionFragment;
    "voters(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "candidates"
      | "candidatesCount"
      | "getCandidatesList"
      | "getVotersList"
      | "isVoter"
      | "totalVotes"
      | "vote"
      | "voters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "candidates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "candidatesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidatesList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotersList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVoter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voters",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "candidatesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidatesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;

  events: {};
}

export interface Election extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ElectionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        voteCount: BigNumber;
      }
    >;

    candidatesCount(overrides?: CallOverrides): Promise<[number]>;

    getCandidatesList(
      overrides?: CallOverrides
    ): Promise<[Election.CandidateStructOutput[]]>;

    getVotersList(
      overrides?: CallOverrides
    ): Promise<[Election.VoterStructOutput[]]>;

    isVoter(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      _candidateId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { voter: string; votedOn: BigNumber }>;
  };

  candidates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      id: BigNumber;
      name: string;
      voteCount: BigNumber;
    }
  >;

  candidatesCount(overrides?: CallOverrides): Promise<number>;

  getCandidatesList(
    overrides?: CallOverrides
  ): Promise<Election.CandidateStructOutput[]>;

  getVotersList(
    overrides?: CallOverrides
  ): Promise<Election.VoterStructOutput[]>;

  isVoter(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _candidateId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { voter: string; votedOn: BigNumber }>;

  callStatic: {
    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        id: BigNumber;
        name: string;
        voteCount: BigNumber;
      }
    >;

    candidatesCount(overrides?: CallOverrides): Promise<number>;

    getCandidatesList(
      overrides?: CallOverrides
    ): Promise<Election.CandidateStructOutput[]>;

    getVotersList(
      overrides?: CallOverrides
    ): Promise<Election.VoterStructOutput[]>;

    isVoter(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _candidateId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { voter: string; votedOn: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidatesCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCandidatesList(overrides?: CallOverrides): Promise<BigNumber>;

    getVotersList(overrides?: CallOverrides): Promise<BigNumber>;

    isVoter(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _candidateId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidatesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCandidatesList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVotersList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isVoter(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _candidateId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
