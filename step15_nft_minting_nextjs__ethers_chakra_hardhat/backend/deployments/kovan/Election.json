{
  "address": "0x741f30E7F3bb8CB04E943E561034cb2aAF6Dc200",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "candidatesCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCandidatesList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Election.Candidate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVotersList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "votedOn",
              "type": "uint256"
            }
          ],
          "internalType": "struct Election.Voter[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isVoter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_candidateId",
          "type": "uint8"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "votedOn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd315d471bcb9d12d6634e7bd1a6a353dbd5dfc89e771be1b89b28f7920f3cef5",
  "receipt": {
    "to": null,
    "from": "0xE813d775f33a97BDA25D71240525C724423D4Cd0",
    "contractAddress": "0x741f30E7F3bb8CB04E943E561034cb2aAF6Dc200",
    "transactionIndex": 0,
    "gasUsed": "1134856",
    "logsBloom": "0x
    "blockHash": "0x9152f2804730383b30055ced9a4f4bb988cc9d018cb986b36a362236f24606fb",
    "transactionHash": "0xd315d471bcb9d12d6634e7bd1a6a353dbd5dfc89e771be1b89b28f7920f3cef5",
    "logs": [],
    "blockNumber": 33176347,
    "cumulativeGasUsed": "1134856",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "6e8a54307aa60fc83d99194de31ece09",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidatesCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCandidatesList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Election.Candidate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotersList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votedOn\",\"type\":\"uint256\"}],\"internalType\":\"struct Election.Voter[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isVoter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_candidateId\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votedOn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Election.sol\":\"Election\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Election.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n// import \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Election {\\r\\n\\r\\n    // Model a Candidate\\r\\n    struct Candidate {\\r\\n        uint id;\\r\\n        string name;\\r\\n        uint256 voteCount;\\r\\n    }\\r\\n\\r\\n    struct Voter {\\r\\n        address voter;\\r\\n        uint256 votedOn;\\r\\n    }\\r\\n\\r\\n\\r\\n    // Store accounts that have voted\\r\\n    uint256 public totalVotes;\\r\\n    mapping(address => Voter) public voters;\\r\\n    Voter[] private votersList;\\r\\n\\r\\n    // Read/write candidates\\r\\n    mapping(uint8 => Candidate) public candidates;\\r\\n\\r\\n    // Store Candidates Count\\r\\n    uint8 public candidatesCount;\\r\\n\\r\\n    constructor () {\\r\\n        addCandidate(\\\"Asif Ali Zardari\\\");\\r\\n        addCandidate(\\\"Imran Khan\\\");\\r\\n        addCandidate(\\\"Nawaz Shareef\\\");\\r\\n    }\\r\\n\\r\\n    function addCandidate (string memory _name) private {\\r\\n        candidatesCount ++;\\r\\n        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);\\r\\n    }\\r\\n\\r\\n    function vote(uint8 _candidateId) public {\\r\\n        // require that they haven't voted before\\r\\n        require(voters[msg.sender].voter == address(0), \\\"Already voted\\\");\\r\\n\\r\\n        // require a valid candidate\\r\\n        require(_candidateId > 0 && _candidateId <= candidatesCount, \\\"not a valid customer ID\\\");\\r\\n\\r\\n        // record that voter has voted\\r\\n        Voter memory _voter = Voter(msg.sender, block.timestamp);\\r\\n        voters[msg.sender] = _voter; \\r\\n        votersList.push(_voter);\\r\\n\\r\\n        // update candidate vote Count\\r\\n        candidates[_candidateId].voteCount++;\\r\\n        totalVotes++;\\r\\n    }\\r\\n\\r\\n    function isVoter(address user) public view returns (bool){\\r\\n        return voters[user].voter != address(0);\\r\\n    }\\r\\n\\r\\n    function getVotersList() public view returns (Voter[] memory){\\r\\n        return votersList;\\r\\n    }\\r\\n\\r\\n    function getCandidatesList() public view returns (Candidate[] memory) {\\r\\n        Candidate[] memory candicatesss = new Candidate[](3);\\r\\n\\r\\n        for(uint8 i=0;  i < candidatesCount; i++){\\r\\n            candicatesss[i] = candidates[i+1];\\r\\n        }\\r\\n        return candicatesss;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x47194e88c6ffd689840b3cbeaa7b5243360761adc5d47724e47217f8a166ca0a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/Election.sol:Election",
        "label": "totalVotes",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 20,
        "contract": "contracts/Election.sol:Election",
        "label": "voters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Voter)13_storage)"
      },
      {
        "astId": 24,
        "contract": "contracts/Election.sol:Election",
        "label": "votersList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Voter)13_storage)dyn_storage"
      },
      {
        "astId": 29,
        "contract": "contracts/Election.sol:Election",
        "label": "candidates",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_struct(Candidate)8_storage)"
      },
      {
        "astId": 31,
        "contract": "contracts/Election.sol:Election",
        "label": "candidatesCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Voter)13_storage)dyn_storage": {
        "base": "t_struct(Voter)13_storage",
        "encoding": "dynamic_array",
        "label": "struct Election.Voter[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Voter)13_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Election.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)13_storage"
      },
      "t_mapping(t_uint8,t_struct(Candidate)8_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct Election.Candidate)",
        "numberOfBytes": "32",
        "value": "t_struct(Candidate)8_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Candidate)8_storage": {
        "encoding": "inplace",
        "label": "struct Election.Candidate",
        "members": [
          {
            "astId": 3,
            "contract": "contracts/Election.sol:Election",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5,
            "contract": "contracts/Election.sol:Election",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7,
            "contract": "contracts/Election.sol:Election",
            "label": "voteCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Voter)13_storage": {
        "encoding": "inplace",
        "label": "struct Election.Voter",
        "members": [
          {
            "astId": 10,
            "contract": "contracts/Election.sol:Election",
            "label": "voter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12,
            "contract": "contracts/Election.sol:Election",
            "label": "votedOn",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}